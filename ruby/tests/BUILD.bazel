load(
    "//ruby:defs.bzl",
    "ruby_binary",
    "ruby_test",
)

# Tests if :ruby_bin can run in sh_binary
sh_test(
    name = "runtime_run_ruby_test",
    srcs = ["runtime_run_ruby_test.sh"],
    args = [
        "$(location args_check.rb)",
        "foo",
        "bar",
        "baz",
    ],
    data = [
        "args_check.rb",
        "@org_ruby_lang_ruby_host//:ruby_bin",
    ],
)

# Tests if :ruby_bin can run in genrule
genrule(
    name = "generate_genrule_run_ruby_test",
    outs = ["genrules_run_ruby_test.sh"],
    cmd = " && ".join([
        ("$(location @org_ruby_lang_ruby_host//:ruby_bin) " +
         "$(location args_check.rb) foo bar baz"),
        "echo '#!/bin/sh -e' > $@",
        "echo true >> $@",
    ]),
    output_to_bindir = 1,
    tools = [
        "args_check.rb",
        "@org_ruby_lang_ruby_host//:ruby_bin",
        "@org_ruby_lang_ruby_host//:runtime",
    ],
)

sh_test(
    name = "genrule_run_ruby_test",
    srcs = ["genrules_run_ruby_test.sh"],
)

ruby_binary(
    name = "args_check",
    srcs = ["args_check.rb"],
)

sh_test(
    name = "args_test",
    srcs = ["args_check"],
    args = [
        "foo",
        "bar",
        "baz",
    ],
)

ruby_binary(
    name = "include_order_check",
    srcs = ["include_order_check.rb"],
    deps = [
        "//ruby/tests/testdata:a",
        "//ruby/tests/testdata:b",
        "//ruby/tests/testdata:c",
        "//ruby/tests/testdata:f",
    ],
)

sh_test(
    name = "include_order_test",
    srcs = ["include_order_check"],
)

ruby_test(
    name = "load_path_in_runfiles",
    srcs = ["load_path_in_runfiles_test.rb"],
    main = "load_path_in_runfiles_test.rb",
    deps = [
        "//ruby/tests/testdata:g",
        "@com_github_yugui_rules_ruby_ruby_tests_testdata_another_workspace//baz/qux:j",
    ],
)

cc_binary(
    name = "example_ext.so",
    testonly = True,
    srcs = ["example_ext.c"],
    linkshared = True,
    deps = ["@org_ruby_lang_ruby_host//:headers"],
)

cc_library(
    name = "example_ext_lib",
    testonly = True,
    srcs = ["example_ext.c"],
    linkstatic = True,
    tags = ["manual"],
    deps = ["@org_ruby_lang_ruby_host//:headers"],
    alwayslink = True,
)

apple_binary(
    name = "example_ext",
    testonly = True,
    binary_type = "loadable_bundle",
    linkopts = [
        "-undefined,dynamic_lookup",
        "-multiply_defined,suppress",
    ],
    platform_type = "macos",
    tags = ["manual"],
    deps = [
        ":example_ext_lib",
    ],
)

genrule(
    name = "gen_exmaple_ext",
    testonly = True,
    srcs = [":example_ext"],
    outs = ["example_ext.bundle"],
    cmd = "cp $< $@",
    tags = ["manual"],
)

config_setting(
    name = "requires_bundle",
    constraint_values = ["@platforms//os:osx"],
)

ruby_test(
    name = "ext_test",
    srcs = ["ext_test.rb"],
    data = select({
        ":requires_bundle": ["example_ext.bundle"],
        "//conditions:default": ["example_ext.so"],
    }),
    main = "ext_test.rb",
)

ruby_binary(
    name = "diff_test",
    srcs = ["diff_test.rb"],
)

sh_test(
    name = "irb_test",
    srcs = [":diff_test"],
    args = [
        "--stdin",
        "$(location //ruby/tests/testdata:irb_input)",
        "--golden",
        "$(location //ruby/tests/testdata:irb_golden)",
        "--",
        "$(location @org_ruby_lang_ruby_host//:irb)",
        "--echo",
        "--noverbose",
        "--prompt=simple",
        "--noreadline",
        "--nocolorize",
    ],
    data = [
        "//ruby/tests/testdata:irb_golden",
        "//ruby/tests/testdata:irb_input",
        "@org_ruby_lang_ruby_host//:irb",
    ],
)
